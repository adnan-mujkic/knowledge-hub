// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using knowledge_hub.WebAPI.Database;

#nullable disable

namespace knowledge_hub.WebAPI.Migrations
{
    [DbContext(typeof(databaseContext))]
    partial class databaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceDigital")
                        .HasColumnType("float");

                    b.Property<double>("PricePhysical")
                        .HasColumnType("float");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "J. R. R. Tolkien",
                            CategoryId = 6,
                            Description = "Continuing the story begun in The Hobbit, this is the first part of Tolkien's epic masterpiece, The Lord of the Rings, featuring a striking black cover based on Tolkien's own design, the definitive text, and a detailed map of Middle-earth. Sauron, the Dark Lord, has gathered to him all the Rings of Power - the means by which he intends to rule Middle-earth. All he lacks in his plans for dominion is the One Ring - the ring that rules them all - which has fallen into the hands of the hobbit, Bilbo Baggins. In a sleepy village in the Shire, young Frodo Baggins finds himself faced with an immense task, as his elderly cousin Bilbo entrusts the Ring to his care. Frodo must leave his home and make a perilous journey across Middle-earth to the Cracks of Doom, there to destroy the Ring and foil the Dark Lord in his evil purpose. Now published again in B format, J.R.R. Tolkien's great work of imaginative fiction has been labelled both a heroic romance and a classic fantasy fiction. By turns comic and homely, epic and diabolic, the narrative moves through countless changes of scene and character in an imaginary world which is totally convincing in its detail.",
                            FilePath = "LOTR1.pdf",
                            ImagePath = "LOTR1.jpg",
                            LanguageId = 1,
                            Name = "The Fellowship of the Ring : The Lord of the Rings, Part 1",
                            PriceDigital = 8.9900000000000002,
                            PricePhysical = 14.5,
                            Score = 4.3799999999999999
                        },
                        new
                        {
                            BookId = 2,
                            Author = "J. R. R. Tolkien",
                            CategoryId = 6,
                            Description = "Building on the story begun in The Hobbit, this is the second part of Tolkien's epic masterpiece, The Lord of the Rings, featuring a striking black cover based on Tolkien's own design, the definitive text, and a detailed map of Middle-earth.",
                            FilePath = "LOTR2.pdf",
                            ImagePath = "LOTR2.jpg",
                            LanguageId = 1,
                            Name = "The Two Towers",
                            PriceDigital = 7.9900000000000002,
                            PricePhysical = 13.5,
                            Score = 4.46
                        },
                        new
                        {
                            BookId = 3,
                            Author = "J. R. R. Tolkien",
                            CategoryId = 6,
                            Description = "Concluding the story begun in The Hobbit, this is the final part of Tolkien's epic masterpiece, The Lord of the Rings. Featuring a striking black cover based on Tolkien's own design, the definitive text, and a detailed map of Middle-earth.",
                            FilePath = "LOTR3.pdf",
                            ImagePath = "LOTR3.jpg",
                            LanguageId = 1,
                            Name = "The Return of the King",
                            PriceDigital = 7.9900000000000002,
                            PricePhysical = 14.5,
                            Score = 4.5499999999999998
                        },
                        new
                        {
                            BookId = 4,
                            Author = "J. R. R. Tolkien",
                            CategoryId = 6,
                            Description = "Bilbo Baggins is a hobbit who enjoys a comfortable, unambitious life, rarely travelling further than the pantry of his hobbit-hole in Bag End. But his contentment is disturbed when the wizard, Gandalf, and a company of thirteen dwarves arrive on his doorstep one day to whisk him away on an unexpected journey 'there and back again'. They have a plot to raid the treasure hoard of Smaug the Magnificent, a large and very dangerous dragon...",
                            FilePath = "Hobbit.pdf",
                            ImagePath = "Hobbit.jpg",
                            LanguageId = 1,
                            Name = "The Hobbit",
                            PriceDigital = 6.9900000000000002,
                            PricePhysical = 11.5,
                            Score = 4.2800000000000002
                        },
                        new
                        {
                            BookId = 5,
                            Author = " Hajime Isayama ",
                            CategoryId = 12,
                            Description = "Several hundred years ago, humans were nearly exterminated by giants. Giants are typically several stories tall, seem to have no intelligence and who devour human beings. A small percentage of humanity survied barricading themselves in a city protected by walls even taller than the biggest of giants. Flash forward to the present and the city has not seen a giant in over 100 years - before teenager Eren and his foster sister Mikasa witness something horrific as the city walls are destroyed by a super-giant that appears from nowhere.",
                            FilePath = "AOT1.pdf",
                            ImagePath = "AOT1.jpg",
                            LanguageId = 1,
                            Name = "Attack On Titan 1",
                            PriceDigital = 5.9900000000000002,
                            PricePhysical = 12.0,
                            Score = 4.4699999999999998
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Chip Zdarsky, Mark Bagley",
                            CategoryId = 9,
                            Description = "In 1962's Amazing Fantasy #15, fifteen-year-old Peter Parker was bitten by a radioactive spider and became the Amazing Spider-Man! 57 years have passed in the real world since that event - so what would have happened if the same amount of time passed for Peter as well? To celebrate Marvel's 80th anniversary, Chip Zdarsky and Spider-Man legend Mark Bagley unite to spin a unique Spidey tale - telling an entire history of Spider-Man from beginning to end, set against the key events of the decades through which he lived!",
                            FilePath = "SpiderManLifeStory.pdf",
                            ImagePath = "SpiderManLifeStory.jpg",
                            LanguageId = 1,
                            Name = "Spider-man: Life Story",
                            PriceDigital = 12.99,
                            PricePhysical = 24.5,
                            Score = 4.21
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Louise Pickford",
                            CategoryId = 8,
                            Description = "Fresh, tasty and bursting with nutritious ingredients and lively aromas, delicious one-bowl, Asian-inspired noodle dishes have never been more popular. Their variety and versatility, speedy cooking time and ability to soak up the bold flavours they're prepared with, make noodle dishes an exotic yet accessible dish and, with The Noodle Bowl, you'll be able to celebrate this wonderful food and feast on the results. ",
                            FilePath = "NoodleBowlRecipes.pdf",
                            ImagePath = "NoodleBowlRecipes.jpg",
                            LanguageId = 1,
                            Name = "The Noodle Bowl : Over 70 Recipes for Asian-Inspired Noodle Dishes",
                            PriceDigital = 11.99,
                            PricePhysical = 21.5,
                            Score = 4.5
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Louise Pickford",
                            CategoryId = 8,
                            Description = "These hearty one-pot meals, flavoured with fragrant spices, are cooked and served from an elegant, specially designed cooking vessel, also called a tagine. In Ghillie Basan's collection of deliciously authentic recipes you will find some of the best-loved classics of the Moroccan kitchen.",
                            FilePath = "ModernTagineCookbook.pdf",
                            ImagePath = "ModernTagineCookbook.jpg",
                            LanguageId = 1,
                            Name = "The Modern Tagine Cookbook : Delicious Recipes for Moroccan One-Pot Meals",
                            PriceDigital = 12.6,
                            PricePhysical = 23.5,
                            Score = 3.75
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.BookUserWishlist", b =>
                {
                    b.Property<int>("BookUserWishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookUserWishlistId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookUserWishlistId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Whishlist");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.CardInfo", b =>
                {
                    b.Property<int>("CardInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardInfoId"), 1L, 1);

                    b.Property<string>("CardDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CardInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardInfoId = 1,
                            CardDate = "01/25",
                            CardNumber = "4242",
                            FullName = "User 1",
                            UserId = 3
                        },
                        new
                        {
                            CardInfoId = 2,
                            CardDate = "02/24",
                            CardNumber = "4242",
                            FullName = "User 2",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Art & Photography"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Biography"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Children's Books"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Crafts & Hobbies"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Crime & Thriller"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Fantasy"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Ficition"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Food & Drinks"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Graphics Novels"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "History"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Horror"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Manga"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Mind, Body & Spirit"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Science Fiction"
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Country = "Bosnia and Herzegovina",
                            Name = "Sarajevo",
                            ZipCode = "71000"
                        },
                        new
                        {
                            CityId = 2,
                            Country = "Bosnia and Herzegovina",
                            Name = "Mostar",
                            ZipCode = "88000"
                        },
                        new
                        {
                            CityId = 3,
                            Country = "Bosnia and Herzegovina",
                            Name = "Konjic",
                            ZipCode = "88400"
                        },
                        new
                        {
                            CityId = 4,
                            Country = "Bosnia and Herzegovina",
                            Name = "Zenica",
                            ZipCode = "72000"
                        },
                        new
                        {
                            CityId = 5,
                            Country = "Bosnia and Herzegovina",
                            Name = "Banja Luka",
                            ZipCode = "78000"
                        },
                        new
                        {
                            CityId = 6,
                            Country = "Bosnia and Herzegovina",
                            Name = "Tuzla",
                            ZipCode = "75000"
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Name = "English"
                        },
                        new
                        {
                            LanguageId = 2,
                            Name = "Deutsch"
                        },
                        new
                        {
                            LanguageId = 3,
                            Name = "Español"
                        },
                        new
                        {
                            LanguageId = 4,
                            Name = "Français"
                        },
                        new
                        {
                            LanguageId = 5,
                            Name = "官話/官话 "
                        },
                        new
                        {
                            LanguageId = 6,
                            Name = "日本語 "
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            LoginId = 1,
                            Email = "admin@knowledge.com",
                            PasswordHash = "IQ+Wv2nxK95mqB7ohg771Hev2S0=",
                            PasswordSalt = "lZJpKHoCCVizoFGANoxBxA=="
                        },
                        new
                        {
                            LoginId = 2,
                            Email = "delivery@knowledge.com",
                            PasswordHash = "zJGPmedca0WsiInZ+YKjUZBYng8=",
                            PasswordSalt = "XCbIdY95AAtw0mRTxCCV5A=="
                        },
                        new
                        {
                            LoginId = 3,
                            Email = "user1@knowledge.com",
                            PasswordHash = "vV8oMGlVNwQPm3+jmU40x7tqH58=",
                            PasswordSalt = "IRV94HBwQFo2IhqZUM4FwQ=="
                        },
                        new
                        {
                            LoginId = 4,
                            Email = "user2@knowledge.com",
                            PasswordHash = "kwgTpya6rsDHnA0XcpDc+4a/4sk=",
                            PasswordSalt = "Cmhbf145MMmcDh/mcIeq0Q=="
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Digital")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("BookId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            AddressLine = "",
                            BookId = 1,
                            CityId = 1,
                            Comment = "",
                            Digital = true,
                            OrderDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4851),
                            OrderNumber = "8e778038-71fc-4930-bbee-197c50499f9d",
                            OrderStatus = 0,
                            ShippingDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4901),
                            UserFullName = "User 1",
                            UserId = 3
                        },
                        new
                        {
                            OrderId = 2,
                            AddressLine = "",
                            BookId = 2,
                            CityId = 1,
                            Comment = "",
                            Digital = true,
                            OrderDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4933),
                            OrderNumber = "c4a82927-67ac-4aa1-a045-902caf095900",
                            OrderStatus = 0,
                            ShippingDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4934),
                            UserFullName = "User 1",
                            UserId = 3
                        },
                        new
                        {
                            OrderId = 3,
                            AddressLine = "",
                            BookId = 1,
                            CityId = 1,
                            Comment = "",
                            Digital = true,
                            OrderDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4937),
                            OrderNumber = "5ed359e2-1ed1-4bea-bdcf-018afff2f05f",
                            OrderStatus = 0,
                            ShippingDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4938),
                            UserFullName = "User 2",
                            UserId = 4
                        },
                        new
                        {
                            OrderId = 4,
                            AddressLine = "",
                            BookId = 3,
                            CityId = 1,
                            Comment = "",
                            Digital = true,
                            OrderDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4940),
                            OrderNumber = "7bc51742-86ee-4611-a46d-0dcc6f0161b6",
                            OrderStatus = 0,
                            ShippingDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4941),
                            UserFullName = "User 2",
                            UserId = 4
                        },
                        new
                        {
                            OrderId = 5,
                            AddressLine = "",
                            BookId = 3,
                            CityId = 1,
                            Comment = "",
                            Digital = true,
                            OrderDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4942),
                            OrderNumber = "f5a98595-55d5-41f0-a467-d71ad7ba0603",
                            OrderStatus = 0,
                            ShippingDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4944),
                            UserFullName = "User 2",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            BookId = 1,
                            Comment = "Great!",
                            PostDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4981),
                            Score = 5.0,
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 2,
                            BookId = 1,
                            Comment = "Great!",
                            PostDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4984),
                            Score = 4.0,
                            UserId = 4
                        },
                        new
                        {
                            ReviewId = 3,
                            BookId = 3,
                            Comment = "Great!",
                            PostDate = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4986),
                            Score = 4.0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "User"
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "Delivery"
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int?>("CardInfoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            CardInfoId = 1,
                            OrderId = 1,
                            Price = 8.9900000000000002,
                            TransactionTime = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4959)
                        },
                        new
                        {
                            TransactionId = 2,
                            CardInfoId = 1,
                            OrderId = 2,
                            Price = 12.99,
                            TransactionTime = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4962)
                        },
                        new
                        {
                            TransactionId = 3,
                            CardInfoId = 2,
                            OrderId = 3,
                            Price = 13.99,
                            TransactionTime = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4964)
                        },
                        new
                        {
                            TransactionId = 4,
                            CardInfoId = 2,
                            OrderId = 4,
                            Price = 7.9900000000000002,
                            TransactionTime = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4965)
                        },
                        new
                        {
                            TransactionId = 5,
                            CardInfoId = 2,
                            OrderId = 5,
                            Price = 5.9900000000000002,
                            TransactionTime = new DateTime(2022, 7, 5, 17, 29, 24, 989, DateTimeKind.Local).AddTicks(4967)
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("LoginId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Biography = "",
                            LoginId = 1,
                            Username = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Biography = "",
                            LoginId = 2,
                            Username = "Delivery"
                        },
                        new
                        {
                            UserId = 3,
                            Biography = "",
                            LoginId = 3,
                            Username = "User"
                        },
                        new
                        {
                            UserId = 4,
                            Biography = "",
                            LoginId = 4,
                            Username = "User"
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.UserRoles", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleID"), 1L, 1);

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            RoleID = 1,
                            UserID = 1
                        },
                        new
                        {
                            UserRoleID = 2,
                            RoleID = 3,
                            UserID = 2
                        },
                        new
                        {
                            UserRoleID = 3,
                            RoleID = 2,
                            UserID = 3
                        },
                        new
                        {
                            UserRoleID = 4,
                            RoleID = 2,
                            UserID = 4
                        });
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Address", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Book", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.Category", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.Language", "language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("language");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.BookUserWishlist", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.CardInfo", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Order", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("knowledge_hub.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Review", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.Book", "book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("user");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Transaction", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.User", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.Login", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.UserRoles", b =>
                {
                    b.HasOne("knowledge_hub.WebAPI.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("knowledge_hub.WebAPI.Database.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("knowledge_hub.WebAPI.Database.UserRoles", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("knowledge_hub.WebAPI.Database.User", b =>
                {
                    b.Navigation("UserRole")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
